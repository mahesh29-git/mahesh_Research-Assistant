# -*- coding: utf-8 -*-
"""Result code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IcL-HN-JD2b8Zn9jjn7sPvHnAqzJHxXD
"""

import pandas as pd

df = pd.read_excel("/content/Indiana dataset.xlsx")
print(df.head())

import os

print(os.getcwd())  # This prints the current working directory


df = pd.read_excel("/content/Indiana dataset.xlsx")
print(df.head())

#>>>>>> DATA CLEANING >>>>>>
# Clean column names by stripping whitespace
df.columns = df.columns.str.strip()

# Standardizing categorical values (unifying COVID-19 naming)
df['TopicArea'] = df['TopicArea'].str.strip().str.replace('_', '-').str.lower().str.title()

# Convert date columns to proper datetime format
df['DatePublished'] = pd.to_datetime(df['DatePublished'], errors='coerce')
df['LastUpdateDate'] = pd.to_datetime(df['LastUpdateDate'], errors='coerce')

# Convert numerical columns (Instances) to integers where applicable
df['Instances'] = df['Instances'].astype(str).str.replace('K', '000').str.replace('M', '000000')
df['Instances'] = pd.to_numeric(df['Instances'], errors='coerce')

# Remove leading/trailing whitespaces from string columns
df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)
# Clean column names by stripping whitespace
df.columns = df.columns.str.strip()

# Standardizing categorical values (unifying COVID-19 naming)
df['TopicArea'] = df['TopicArea'].str.strip().str.replace('_', '-').str.lower().str.title()

# Convert date columns to proper datetime format
df['DatePublished'] = pd.to_datetime(df['DatePublished'], errors='coerce')
df['LastUpdateDate'] = pd.to_datetime(df['LastUpdateDate'], errors='coerce')

# Convert numerical columns (Instances) to integers where applicable
df['Instances'] = df['Instances'].astype(str).str.replace('K', '000').str.replace('M', '000000')
df['Instances'] = pd.to_numeric(df['Instances'], errors='coerce')

# Remove leading/trailing whitespaces from string columns
df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)

df.to_csv("Indiana_cleaned_data.csv", index=False)  # Save as an Excel file
from google.colab import files
files.download("Indiana_cleaned_data.csv")  # Download the file


print(df.head()) # This prints the first 5 rows of the dataframe
print(df.tail()) # This prints the last 5 rows of the dataframe

# >>>> DATA INTERPRETATION >>>

# Count datasets by topic area
topic_distribution = df['TopicArea'].value_counts()

# Count datasets by publisher (Top 10 publishers)
publisher_distribution = df['Creator/Publisher'].value_counts().head(10)

# Analyze dataset update frequency
df['YearUpdated'] = df['LastUpdateDate'].dt.year
update_frequency = df['YearUpdated'].value_counts().sort_index()

# Count missing values
missing_values = df.isnull().sum()

# Display distributions
# Instead of using 'ace_tools', which is likely a custom or unavailable library,
# we'll use basic display methods for now.
print("Dataset Distribution by Topic Area:")
print(topic_distribution.to_frame())

print("\nDataset Distribution by Publisher:")
print(publisher_distribution.to_frame())

print("\nDataset Update Frequency:")
print(update_frequency.to_frame())

print("\nMissing Values Analysis:")
print(missing_values.to_frame())

# DATA VISUALIZATION - I
import matplotlib.pyplot as plt

# Plot dataset distribution by topic area
plt.figure(figsize=(10, 5))
topic_distribution.plot(kind='bar', color='purple', alpha=0.7)
plt.title("Dataset Distribution by Topic Area")
plt.xlabel("Topic Area")
plt.ylabel("Number of Datasets")
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# DATA VISUALIZATION - II
# Plot dataset distribution by publisher
plt.figure(figsize=(10, 5))
publisher_distribution.plot(kind='bar', color='yellow', alpha=0.7)
plt.title("Top 10 Dataset Publishers")
plt.xlabel("Publisher")
plt.ylabel("Number of Datasets")
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Plot dataset update frequency
plt.figure(figsize=(10, 5))
update_frequency.plot(kind='bar', color='orange', alpha=0.7)
plt.title("Dataset Update Frequency Over the Years")
plt.xlabel("Year")
plt.ylabel("Number of Updates")
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()